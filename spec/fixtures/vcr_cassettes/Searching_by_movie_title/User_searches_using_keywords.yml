---
http_interactions:
- request:
    method: get
    uri: https://api.themoviedb.org/3/search/movie?api_key=<MOVIEDB_API_KEY>&language=en-US&page=1&query=whatever
    body:
      encoding: US-ASCII
      string: ''
    headers:
      X-Api-Key:
      - "<MOVIEDB_API_KEY>"
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Date:
      - Tue, 13 Oct 2020 19:26:32 GMT
      Server:
      - openresty
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, HEAD, POST, PUT, DELETE, OPTIONS
      Access-Control-Expose-Headers:
      - ETag, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After,
        Content-Length, Content-Range
      Cache-Control:
      - public, max-age=120
      Vary:
      - Accept-Encoding
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0f653303bc95b26f01daff2926667902.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - DEN50-C2
      X-Amz-Cf-Id:
      - gLMJ_3a3KI4i8U4KOZqXZ4wvy-0qaHJOXrO6D0tsZgPUCtnd2Rh7gA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJwYWdlIjoxLCJ0b3RhbF9yZXN1bHRzIjo2OSwidG90YWxfcGFnZXMiOjQsInJlc3VsdHMiOlt7InBvcHVsYXJpdHkiOjE2LjM5LCJ2b3RlX2NvdW50IjoxMTY2LCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjoiXC90U2hGQlgyZXVkemtDWnc1RW5CMlpxTGFQU1EuanBnIiwiaWQiOjE5MjY1LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL21xbmFxS1dSZWZ0eEVENkxQR0xURG1NaldDWS5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJXaGF0ZXZlciBXb3JrcyIsImdlbnJlX2lkcyI6WzM1LDEwNzQ5XSwidGl0bGUiOiJXaGF0ZXZlciBXb3JrcyIsInZvdGVfYXZlcmFnZSI6Ny4xLCJvdmVydmlldyI6IldoYXRldmVyIFdvcmtzIGV4cGxvcmVzIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBhIGNyb3RjaGV0eSBtaXNhbnRocm9wZSwgQm9yaXMgYW5kIGEgbmHDr3ZlLCBpbXByZXNzaW9uYWJsZSB5b3VuZyBydW5hd2F5IGZyb20gdGhlIHNvdXRoLCBNZWxvZHkuIFdoZW4gTWVsb2R5J3MgdXB0aWdodCBwYXJlbnRzIGFycml2ZSBpbiBOZXcgWW9yayB0byByZXNjdWUgaGVyLCB0aGV5IGFyZSBxdWlja2x5IGRyYXduIGludG8gd2lsZGx5IHVuZXhwZWN0ZWQgcm9tYW50aWMgZW50YW5nbGVtZW50cy4gRXZlcnlvbmUgZGlzY292ZXJzIHRoYXQgZmluZGluZyBsb3ZlIGlzIGp1c3QgYSBjb21iaW5hdGlvbiBvZiBsdWNreSBjaGFuY2UgYW5kIGFwcHJlY2lhdGluZyB0aGUgdmFsdWUgb2YgXCJ3aGF0ZXZlciB3b3Jrcy5cIiIsInJlbGVhc2VfZGF0ZSI6IjIwMDktMDYtMTkifSx7InBvcHVsYXJpdHkiOjEwLjAzMiwidm90ZV9jb3VudCI6MTU5LCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjoiXC9hbzRSb0dYQzl3b1djN2hyUnREUlJ5RGJDSmwuanBnIiwiaWQiOjE2MjIyLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL3dqMW9zckVHQ2J3Tk85RHYwYXV2VkRaYk44eS5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJXaGF0ZXZlciBJdCBUYWtlcyIsImdlbnJlX2lkcyI6WzM1LDE4LDEwNzQ5XSwidGl0bGUiOiJXaGF0ZXZlciBJdCBUYWtlcyIsInZvdGVfYXZlcmFnZSI6NS42LCJvdmVydmlldyI6IkEgbmVyZHkgdGVlbiwgUnlhbiBXb29kbWFuIGlzIHNtaXR0ZW4gd2l0aCB0aGUgcG9wdWxhciBhbmQgZ29yZ2VvdXMgQXNobGV5IEdyYW50LCB3aG8gYXBwYXJlbnRseSBoYXMgbm8gaW50ZXJlc3QgaW4gaGltLiBNZWFud2hpbGUsIGRpbSBzdGFyIGF0aGxldGUgQ2hyaXMgQ2FtcGJlbGwgaGFzIGhpcyBleWUgb24gUnlhbidzIGJyYWlueSBhbmQgYmVhdXRpZnVsIGZyaWVuZCwgTWFnZ2llIENhcnRlci4gVGhlIHR3byBhZ3JlZSB0byBoZWxwIGVhY2ggb3RoZXIgaW4gdGhlaXIgcm9tYW50aWMgcXVlc3RzLCBidXQsIGFzIHRoZXkgY29tZSBjbG9zZXIgdG8gdGhlaXIgZ29hbHMsIGJvdGggUnlhbiBhbmQgQ2hyaXMgc3VzcGVjdCB0aGF0IHRoZXkgbWlnaHQgYmUgcHVyc3VpbmcgdGhlIHdyb25nIGdpcmxzLiIsInJlbGVhc2VfZGF0ZSI6IjIwMDAtMDMtMzEifSx7InBvcHVsYXJpdHkiOjQuMTc5LCJpZCI6Mjg0Mzc0LCJ2aWRlbyI6ZmFsc2UsInZvdGVfY291bnQiOjExLCJ2b3RlX2F2ZXJhZ2UiOjUsInRpdGxlIjoiTG92ZSBvciBXaGF0ZXZlciIsInJlbGVhc2VfZGF0ZSI6IjIwMTItMTAtMjMiLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJMb3ZlIG9yIFdoYXRldmVyIiwiZ2VucmVfaWRzIjpbMzVdLCJiYWNrZHJvcF9wYXRoIjoiXC9sS05wU3VvTFN3UHI1UDB5WGd4Q0JuOFNpU20uanBnIiwiYWR1bHQiOmZhbHNlLCJvdmVydmlldyI6IkNvcmV5IGhhZCBpdCBhbGwgLSBhIHN1Y2Nlc3NmdWwgY2FyZWVyLCBiYWdzIG9mIGNoYXJtIGFuZCwgbW9zdCBvZiBhbGwsIGEgYnJpZ2h0IGZ1dHVyZSB3aXRoIGhpcyBib3lmcmllbmQuIEJ1dCwgd2hlbiBoaXMgb3RoZXIgaGFsZiBjb21taXRzIHRoZSB1bHRpbWF0ZSBiZXRyYXlhbCBhbmQgZHVtcHMgaGltIGZvciBhIHdvbWFuLCBoZSBlbWJhcmtzIHVwb24gYSB3aWxkIGpvdXJuZXkgb2Ygc2VsZi1kaXNjb3ZlcnkuIFNvb24sIGhlIG1lZXRzIGEgcG90ZW50aWFsbHkgcGVyZmVjdCBuZXcgZ3V5IGJ1dCBmaXJzdCBoZSBuZWVkcyB0byBtYWtlIHNvbWUgbGlmZS1jaGFuZ2luZyBjaG9pY2VzLiIsInBvc3Rlcl9wYXRoIjoiXC9qUExRTXRaOEpLREIzNG13YnZnMkVhU2Z5Tm8uanBnIn0seyJwb3B1bGFyaXR5IjozLjMyOSwidm90ZV9jb3VudCI6NCwidmlkZW8iOmZhbHNlLCJwb3N0ZXJfcGF0aCI6IlwvckxyMEc4QVFaYjJjcXRWcjlTUGxCT2FRd2JZLmpwZyIsImlkIjoxMDIzMDQsImFkdWx0IjpmYWxzZSwiYmFja2Ryb3BfcGF0aCI6bnVsbCwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiV2hhdGV2ZXIiLCJnZW5yZV9pZHMiOlsxOF0sInRpdGxlIjoiV2hhdGV2ZXIiLCJ2b3RlX2F2ZXJhZ2UiOjcuNCwib3ZlcnZpZXciOiJBIE5ldyBKZXJzZXkgdGVlbiBmYWNlcyBoZXIgaW1wZW5kaW5nIGFkdWx0aG9vZCwgZHJlYW1pbmcgb2YgYSBsaWZlIGFzIGEgc3VjY2Vzc2Z1bCBOZXcgWW9yayBhcnRpc3QuIEJ1dCB3aGVuIHNoZSBnZXRzIGNhdWdodCB1cCBpbiB0aGUgY2FyZWZyZWUgc3BvcnQgb2YgcHJlLUFJRFMgc2V4IGFuZCBkcnVncywgaGVyIGZ1dHVyZSBiZWNvbWVzIGxlc3MgY2VydGFpbi4iLCJyZWxlYXNlX2RhdGUiOiIxOTk4LTA3LTEwIn0seyJwb3B1bGFyaXR5Ijo0Ljg2MSwidm90ZV9jb3VudCI6MTgsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL2hNdEJXVEdUdjFhTDlrSXI5dE12MXdWTzhnRi5qcGciLCJpZCI6MTc0OTUsImFkdWx0IjpmYWxzZSwiYmFja2Ryb3BfcGF0aCI6bnVsbCwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiV2hhdGV2ZXIgTG9sYSB3YW50cyIsImdlbnJlX2lkcyI6WzE4XSwidGl0bGUiOiJXaGF0ZXZlciBMb2xhIHdhbnRzIiwidm90ZV9hdmVyYWdlIjo2LjMsIm92ZXJ2aWV3IjoiQSBCcm9va2x5biBwb3N0YWwgd29ya2VyIGZvbGxvd3MgaGVyIEVneXB0aWFuIGJveWZyaWVuZCB0byBDYWlybyB3aGVyZSBzaGUgdGFrZXMgYmVsbHktZGFuY2luZyBsZXNzb25zIGZyb20gYSBsZWdlbmRhcnkgYnV0IGRpc2dyYWNlZCBFZ3lwdGlhbiBkYW5jZXIuIiwicmVsZWFzZV9kYXRlIjoiMjAwNy0xMi0xMSJ9LHsicG9wdWxhcml0eSI6NS4yMzksInZvdGVfY291bnQiOjExLCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjoiXC9pWFl6ZHBRRWRQbmoxcnp1Y3ZaeVVPcUZ3ekwuanBnIiwiaWQiOjQ5OTIyLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOm51bGwsIm9yaWdpbmFsX2xhbmd1YWdlIjoiZW4iLCJvcmlnaW5hbF90aXRsZSI6IldoYXRldmVyIEhhcHBlbmVkIHRvIEhhcm9sZCBTbWl0aD8iLCJnZW5yZV9pZHMiOlszNV0sInRpdGxlIjoiV2hhdGV2ZXIgSGFwcGVuZWQgdG8gSGFyb2xkIFNtaXRoPyIsInZvdGVfYXZlcmFnZSI6Ni41LCJvdmVydmlldyI6Ikl0J3MgMTk3NiwgYW5kIFZpbm55IGlzIGEgY29uZnVzZWQgdGVlbmFnZXIgd2hvIGNhbid0IGRlY2lkZSB3aGV0aGVyIGhlIGlzIGEgZGlzY28ga2luZyBvciBhIHByb3RvIHB1bmsgcm9ja2VyLiIsInJlbGVhc2VfZGF0ZSI6IjIwMDAtMDMtMTAifSx7InBvcHVsYXJpdHkiOjMuODQyLCJ2b3RlX2NvdW50IjowLCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjpudWxsLCJpZCI6NzM4MTAyLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOm51bGwsIm9yaWdpbmFsX2xhbmd1YWdlIjoiZW4iLCJvcmlnaW5hbF90aXRsZSI6IkdsYXNzIEhhbGYgV2hhdGV2ZXIiLCJnZW5yZV9pZHMiOltdLCJ0aXRsZSI6IkdsYXNzIEhhbGYgV2hhdGV2ZXIiLCJ2b3RlX2F2ZXJhZ2UiOjAsIm92ZXJ2aWV3IjoiT24gYSB3aW50ZXJ5LCBnbG9vbXksIGltcGVyZmVjdCBkYXksIEkgZmlsbGVkIGEgZ2xhc3MgaGFsZndheSB3aXRoIHdhdGVyIGFuZCBwbGFjZWQgaXQgb24gdGhlIGJlYWNoLiBXaGVuIHlvdSBsb29rIGF0IHRoZSBnbGFzcywgaXMgaXQgaGFsZiBlbXB0eSBvciBoYWxmIGZ1bGw/IEkgc2F5LCB3aGF0ZXZlci4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTEwLTA4In0seyJwb3B1bGFyaXR5IjoyLjQxOCwiaWQiOjMyOTIyMywidmlkZW8iOmZhbHNlLCJ2b3RlX2NvdW50Ijo0LCJ2b3RlX2F2ZXJhZ2UiOjUuNSwidGl0bGUiOiJXaGF0ZXZlciBTaGUgV2FudHMiLCJyZWxlYXNlX2RhdGUiOiIyMDEwLTAyLTAyIiwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiV2hhdGV2ZXIgU2hlIFdhbnRzIiwiZ2VucmVfaWRzIjpbXSwiYmFja2Ryb3BfcGF0aCI6bnVsbCwiYWR1bHQiOmZhbHNlLCJvdmVydmlldyI6IldoYXRldmVyIFNoZSBXYW50cyBpcyB0aGUgc3RvcnkgYWJvdXQgb25lIHdvbWFuIHMgZGV0ZXJtaW5hdGlvbiB0byByZWRpc2NvdmVyIHdobyBzaGUgcmVhbGx5IGlzLi4uIFZpdmlhbiBXb2xmIChWaXZpY2EgQS4gRm94KSBoYXMgc3VmZmVyZWQgb25lIGhlYXJ0YnJlYWsgdG9vIG1hbnkgYW5kIGhhcyBubyByb29tIGxlZnQgZm9yIHVuZnVsZmlsbGluZyByZWxhdGlvbnNoaXBzLiBOb3cgc2hlIGhhcyBjb21lIHVwIHdpdGggdGhlIHNvbHV0aW9uIHRvIGV2ZXJ5IHdvbWFuIHMgcHJvYmxlbSwgYSBwcml2YXRlIGNsdWIgY2FsbGVkIFdoYXRldmVyIFNoZSBXYW50cyB3aGVyZSBtZW4gaGF2ZSB0byBxdWFsaWZ5IHRvIGdldCBpbi4iLCJwb3N0ZXJfcGF0aCI6IlwvZVdSVmpiT0R0RUdpQzI0UmdDQmVQUjhWUEplLmpwZyJ9LHsicG9wdWxhcml0eSI6Mi4wODksImlkIjoyODgyMTcsInZpZGVvIjpmYWxzZSwidm90ZV9jb3VudCI6MSwidm90ZV9hdmVyYWdlIjo2LCJ0aXRsZSI6IldoYXRldmVyIExvdmUgTWVhbnMiLCJyZWxlYXNlX2RhdGUiOiIyMDA1LTEyLTA1Iiwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiV2hhdGV2ZXIgTG92ZSBNZWFucyIsImdlbnJlX2lkcyI6W10sImJhY2tkcm9wX3BhdGgiOm51bGwsImFkdWx0IjpmYWxzZSwib3ZlcnZpZXciOiJTdHJhcCBpbiBmb3IgYSByb2xsZXJjb2FzdGVyIHJpZGUgdGhyb3VnaCB0aGUgZW1vdGlvbmFsIHdvcmxkcyBvZiBsb3ZlIGFuZCByb3lhbHR5IGluIGFuIG9yaWdpbmFsIFdFIENoYW5uZWwgbW92aWUgZXhwbG9yaW5nIHRoZSBlbmR1cmluZywgMzAteWVhciByb21hbmNlIHNoYXJlZCBiZXR3ZWVuIFByaW5jZSBDaGFybGVzIGFuZCBDYW1pbGxhIFBhcmtlci1Cb3dsZXMuIERlY2FkZXMgYmVmb3JlIHRoZSBmYWlyeSB0YWxlIHdlZGRpbmcgb2YgUHJpbmNlIENoYXJsZXMgYW5kIExhZHkgRGlhbmEsIHRoZSB5b3VuZyBwcmluY2UgYW5kIGhpcyBsb25ndGltZSBzd2VldGhlYXJ0IGZvdW5kIHRoZWlyIGdyb3dpbmcgbG92ZSB0cmFnaWNhbGx5IGNsaXBwZWQgYnkgdGhlIG1hbnkgZGVtYW5kcyBvZiByb3lhbHR5IGFuZCB0aGUgc29tZXRpbWVzIHJvdWdoIHdhdGVycyBvZiByb21hbmNlLiBUaG91Z2ggaGUgaGFkIHByZXZpb3VzbHkgZXhjaGFuZ2VkIHZvd3Mgd2l0aCB0aGUgZ2xhbW9yb3VzIERpYW5hLCBQcmluY2UgQ2hhcmxlcyBuZXZlciB0cnVseSBmb3Jnb3QgYWJvdXQgUGFya2VyLUJvd2xlcywgYW5kIGluIHRoaXMgZmlsbSBBbmdsb3BoaWxlcyBhbmQgcm95YWx0eSBzY2hvbGFycyBhbGlrZSB3aWxsIGZpbmFsbHkgbGVhcm4gdGhlIHRydXRoIGJlaGluZCBvbmUgb2YgdGhlIGhpZ2hlc3QgcHJvZmlsZSByb21hbmNlcyBpbiBtb2Rlcm4gaGlzdG9yeS4iLCJwb3N0ZXJfcGF0aCI6bnVsbH0seyJwb3B1bGFyaXR5IjoxLjUxMSwidm90ZV9jb3VudCI6NCwidmlkZW8iOmZhbHNlLCJwb3N0ZXJfcGF0aCI6IlwvbWNESmswVmNNSXhKRGRVWDI3ZDZ2cWdQbDVMLmpwZyIsImlkIjo0MjUyMTUsImFkdWx0IjpmYWxzZSwiYmFja2Ryb3BfcGF0aCI6Ilwva0xiaVM1eU12dUFjMjZjM2F4RllHMmRheTloLmpwZyIsIm9yaWdpbmFsX2xhbmd1YWdlIjoiZGUiLCJvcmlnaW5hbF90aXRsZSI6IldoYXRldmVyIEhhcHBlbnMiLCJnZW5yZV9pZHMiOlszNSwxOCwxMDc0OV0sInRpdGxlIjoiV2hhdGV2ZXIgSGFwcGVucyIsInZvdGVfYXZlcmFnZSI6Ny4zLCJvdmVydmlldyI6Ikhhbm5haCBhbmQgSnVsaWFuIGhhdmUgc2VwYXJhdGVkIGFuZCBtZWV0IGZvciBhIGxhc3QgdGltZSB0byBlbXB0eSBvdXQgdGhlaXIgc2hhcmVkIGFwYXJ0bWVudC4gQnV0IG5vdGhpbmcgZ29lcyBhcyBwbGFubmVkLCBhbmQgdGhlaXIgbGFzdCBuaWdodCB0b2dldGhlciBiZWNvbWVzIGEgdHVyYnVsZW50IHJvbGxlci1jb2FzdGVyIHJpZGUuIiwicmVsZWFzZV9kYXRlIjoiMjAxNy0xMS0zMCJ9LHsicG9wdWxhcml0eSI6MS4zNzcsImlkIjozMzY3NzMsInZpZGVvIjpmYWxzZSwidm90ZV9jb3VudCI6MSwidm90ZV9hdmVyYWdlIjo4LjUsInRpdGxlIjoiV2hhdGV2ZXIgQ29tZXMgTmV4dCIsInJlbGVhc2VfZGF0ZSI6IjIwMTQtMTEtMjMiLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJXaGF0ZXZlciBDb21lcyBOZXh0IiwiZ2VucmVfaWRzIjpbOTksMzZdLCJiYWNrZHJvcF9wYXRoIjpudWxsLCJhZHVsdCI6ZmFsc2UsIm92ZXJ2aWV3IjoiV2hhdGV2ZXIgQ29tZXMgTmV4dCBpcyBhIGRvY3VtZW50YXJ5IGFib3V0IHRoZSBjdXJpb3VzIGFuZCBkeW5hbWljIGxpZmUgb2YgQW5uZW1hcmllIE1haGxlci1FdHRpbmdlci5cciBUaGUgZmlsbSBwb3J0cmF5cyB0aGUgcGFpbnRlciBhbmQgc2Nob2xhciwgQW5uZW1hcmllIE1haGxlci4gQm9ybiBpbiBWaWVubmEgaW4gMTkyNiwgTWFobGVyIGZsZWQgYnkgaGVyc2VsZiBhcyBhIHR3ZWx2ZS15ZWFyIGNoaWxkIHRvIHRoZSBVbml0ZWQgU3RhdGVzIGFuZCBoYXMgc2luY2UgMTk1NSBoYXMgbGl2ZWQgaW4gQmxvb21pbmd0b24sIElOLCBhbmQgaW4gdGhlIHN1bW1lcnMgaW4gV29vZHMgSG9sZSwgTUEuICBUaGUgZG9jdW1lbnRhcnkgcG9ydHJheXMgdGhlIGFydGlzdCdzIG91dGVyIGFuZCBpbm5lciBsaXZlcywgd2hpY2ggYnJpZGdlIHR3byBjZW50dXJpZXMgYW5kIHR3byBjb250aW5lbnRzLiIsInBvc3Rlcl9wYXRoIjpudWxsfSx7InBvcHVsYXJpdHkiOjEuOTYsInZvdGVfY291bnQiOjUsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcLzN6ZjRTT3NlTGJvbnVXSm5kcnhpSE9YQWtibS5qcGciLCJpZCI6NDk4MDY4LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL2FuSkZjdDdOTkFFQVI5cUVJSGZXWk50ZW05Wi5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImRlIiwib3JpZ2luYWxfdGl0bGUiOiJXaGF0ZXZlciBIYXBwZW5zIE5leHQiLCJnZW5yZV9pZHMiOlszNSwxOF0sInRpdGxlIjoiV2hhdGV2ZXIgSGFwcGVucyBOZXh0Iiwidm90ZV9hdmVyYWdlIjo3LCJvdmVydmlldyI6IkEgcm9hZCBtb3ZpZSBhYm91dCBhIGRyb3BvdXQgd2hvIGxlYXZlcyBoaW1zZWxmIGNvbXBsZXRlbHkgdG8gY2hhbmNlLiBBIHBhcmFibGUgYWJvdXQgZnJlZWRvbSwgc2VsZi1kZXRlcm1pbmF0aW9uIGFuZCB0aGUgcG9ldHJ5IG9mIGFuIHVuZGVmaW5lZCBsaWZlLiIsInJlbGVhc2VfZGF0ZSI6IjIwMTgtMDItMjEifSx7InBvcHVsYXJpdHkiOjIuMTA4LCJpZCI6MzY4MjQsInZpZGVvIjpmYWxzZSwidm90ZV9jb3VudCI6MSwidm90ZV9hdmVyYWdlIjo4LCJ0aXRsZSI6IkNhcmwgQmFycm9uOiBXaGF0ZXZlciBDb21lcyBOZXh0IiwicmVsZWFzZV9kYXRlIjoiMjAwNS0wOC0yMiIsIm9yaWdpbmFsX2xhbmd1YWdlIjoiZW4iLCJvcmlnaW5hbF90aXRsZSI6IkNhcmwgQmFycm9uOiBXaGF0ZXZlciBDb21lcyBOZXh0IiwiZ2VucmVfaWRzIjpbMzVdLCJiYWNrZHJvcF9wYXRoIjpudWxsLCJhZHVsdCI6ZmFsc2UsIm92ZXJ2aWV3IjoiRmVhdHVyZXMgb3ZlciBhbiBob3VyIG9mIGhpcyBhd2FyZC13aW5uaW5nIHNob3cgcGx1cyBzcGVjaWFsIGJlaGluZC10aGUtc2NlbmVzIGZvb3RhZ2UgdGFraW5nIHlvdSBvbiBhIGpvdXJuZXkgeW91IHdpbGwgbmV2ZXIgZm9yZ2V0IiwicG9zdGVyX3BhdGgiOiJcLzZvQlhrOTQxaHNzYk45Vm84OVJnMGNPcXVTRS5qcGcifSx7InBvcHVsYXJpdHkiOjEuODgsImlkIjo1MzcyNDQsInZpZGVvIjpmYWxzZSwidm90ZV9jb3VudCI6MCwidm90ZV9hdmVyYWdlIjowLCJ0aXRsZSI6IkRvd24gZm9yIFdoYXRldmVyIiwicmVsZWFzZV9kYXRlIjoiMjAxOC0wNy0yMiIsIm9yaWdpbmFsX2xhbmd1YWdlIjoiZW4iLCJvcmlnaW5hbF90aXRsZSI6IkRvd24gZm9yIFdoYXRldmVyIiwiZ2VucmVfaWRzIjpbMjhdLCJiYWNrZHJvcF9wYXRoIjoiXC9mYklMU1RxVmlBaUtuYVlxZWNJTkNSUlpKM1kuanBnIiwiYWR1bHQiOmZhbHNlLCJvdmVydmlldyI6IkEgeW91bmcgYW5kIHN1Y2Nlc3NmdWwgZG9jdG9yIGlzIHNob2NrZWQgdG8gbGVhcm4gaGVyIHR3byBzaXN0ZXJzIGFyZSBzdXNwZWN0ZWQgb2Yga2lsbGluZyBhIGNvcC4iLCJwb3N0ZXJfcGF0aCI6IlwvbEZkcFVVcGZlTUdPYW1GZmwySkN3S2t0RDU0LmpwZyJ9LHsicG9wdWxhcml0eSI6MS44MjEsInZvdGVfY291bnQiOjIsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3Q3WHRKTnJTUXlNMWlHZk1zVGhmSmZmVmxLRS5qcGciLCJpZCI6MTIxODM3LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOm51bGwsIm9yaWdpbmFsX2xhbmd1YWdlIjoiZW4iLCJvcmlnaW5hbF90aXRsZSI6IldoYXRldmVyIGl0IFRha2VzIiwiZ2VucmVfaWRzIjpbMjgsMzUsNTNdLCJ0aXRsZSI6IldoYXRldmVyIGl0IFRha2VzIiwidm90ZV9hdmVyYWdlIjo2LjUsIm92ZXJ2aWV3IjoiVHdvIExvcyBBbmdlbGVzIGNvcHMgZ28gdW5kZXJjb3ZlciB0byBpbnZlc3RpZ2F0ZSB0aGUgZGlzdHJpYnV0aW9uIG9mIHN0ZXJvaWRzIHRvIHdyZXN0bGVycyBhbmQgYm9keSBidWlsZGVycy4iLCJyZWxlYXNlX2RhdGUiOiIxOTk4LTAxLTAxIn0seyJwb3B1bGFyaXR5IjoxLjcxNywiaWQiOjExMjQ0OSwidmlkZW8iOmZhbHNlLCJ2b3RlX2NvdW50Ijo4LCJ2b3RlX2F2ZXJhZ2UiOjUuMSwidGl0bGUiOiJXaGF0ZXZlciBXZSBEbyIsInJlbGVhc2VfZGF0ZSI6IjIwMDMtMDEtMTYiLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJXaGF0ZXZlciBXZSBEbyIsImdlbnJlX2lkcyI6WzM1LDE4XSwiYmFja2Ryb3BfcGF0aCI6bnVsbCwiYWR1bHQiOmZhbHNlLCJvdmVydmlldyI6IlR3ZW50eSBtYXJnYXJpdGFzIGFuZCAxMCBzaG90cyBvZiB0ZXF1aWxhLCB3aXRoIGEgZmV3IG91bmNlcyBvZiBkZWJhdWNoZXJ5LCBicmluZyBmb3VyIGZyaWVuZHMgY2xvc2VyIHRvIHRoZSB0cnV0aCB0aGFuIHRoZXkgaGF2ZSBiZWVuIGZvciB5ZWFycy4iLCJwb3N0ZXJfcGF0aCI6bnVsbH0seyJwb3B1bGFyaXR5IjoyLjk5Niwidm90ZV9jb3VudCI6MCwidmlkZW8iOmZhbHNlLCJwb3N0ZXJfcGF0aCI6IlwvZWVXaEpZTUpIM0xYN01NcG9TekF4WEFEckhWLmpwZyIsImlkIjo2Njc4NzAsImFkdWx0IjpmYWxzZSwiYmFja2Ryb3BfcGF0aCI6IlwvaEoySkplejZyOURCTHJyT1BOVmRuS3BTMmI0LmpwZyIsIm9yaWdpbmFsX2xhbmd1YWdlIjoiZW4iLCJvcmlnaW5hbF90aXRsZSI6IkNvbm5vciBNY0RhdmlkOiBXaGF0ZXZlciBpdCBUYWtlcyIsImdlbnJlX2lkcyI6Wzk5XSwidGl0bGUiOiJDb25ub3IgTWNEYXZpZDogV2hhdGV2ZXIgaXQgVGFrZXMiLCJ2b3RlX2F2ZXJhZ2UiOjAsIm92ZXJ2aWV3IjoiQ29ubm9yIE1jRGF2aWQ6IFdoYXRldmVyIGl0IFRha2VzIGZvbGxvd3MgdGhlIG1vc3QgcGh5c2ljYWxseSBhbmQgZW1vdGlvbmFsbHkgY2hhbGxlbmdpbmcgb2Zmc2Vhc29uIG9mIENvbm5vciBNY0RhdmlkJ3MgY2FyZWVyLiBUaGlzIGRvY3VtZW50YXJ5IGlzIHRoZSByZW1hcmthYmxlIGNvbWViYWNrIHN0b3J5IG9mIG9uZSBvZiB0aGUgTkhMJ3MgYmVzdCBwbGF5ZXJzIGFmdGVyIHdoYXQgY291bGQgaGF2ZSBiZWVuIGEgY2FyZWVyIGVuZGluZyBvciBhbHRlcmluZyBpbmp1cnkuIEEgd29ybGQtY2xhc3MgbWVkaWNhbCB0ZWFtIGxlZCBieSBNYXJrIExpbmRzYXksIHN1cGVydmlzZWQgTWNEYXZpZCdzIGdydWVsbGluZyByZWhhYmlsaXRhdGlvbiBwcm9ncmFtIHdoaWNoIGNvbWJpbmVkIGFkdmFuY2VkIHNwb3J0IHNjaWVuY2UgYW5kIGltYWdpbmcgdGVjaG5pcXVlcyB3aXRoIENvbm5vcidzIHNoZWVyIHdpbGwgdG8gb3ZlcmNvbWUsIGFsbG93aW5nIGhpbSB0byByZXR1cm4gdG8gdGhlIEVkbW9udG9uIE9pbGVycyBsaW5ldXAgZm9yIHRoZSAyMDE5LTIwIGhvbWUgb3BlbmVyLiBNY0RhdmlkIG5vdCBvbmx5IGNhbWUgYmFjaywgYnV0IGlzIGZhc3RlciBhbmQgc3Ryb25nZXIgdGhhbiBldmVyIGFuZCBoYXZpbmcgdGhlIGJlc3Qgc2Vhc29uIG9mIGhpcyB5b3VuZyBjYXJlZXIuIE1jRGF2aWQgZW50ZXJzIHRoZSAyMDIwIEFsbC1TdGFyIGJyZWFrIGxlYWRpbmcgdGhlIE5ITCBpbiBzY29yaW5nLCBhbmQgaGFzIGhpcyBFZG1vbnRvbiBPaWxlcnMgaW4gdGhlIGh1bnQgZm9yIDFzdCBQbGFjZSBpbiB0aGUgUGFjaWZpYyBEaXZpc2lvbi4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTAxLTI0In0seyJwb3B1bGFyaXR5IjoyLjY1OCwidm90ZV9jb3VudCI6MCwidmlkZW8iOmZhbHNlLCJwb3N0ZXJfcGF0aCI6bnVsbCwiaWQiOjQyMjUwMCwiYWR1bHQiOmZhbHNlLCJiYWNrZHJvcF9wYXRoIjpudWxsLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJCYXJyeSBDcmltbWluczogV2hhdGV2ZXIgVGhyZWF0ZW5zIFlvdSIsImdlbnJlX2lkcyI6WzM1XSwidGl0bGUiOiJCYXJyeSBDcmltbWluczogV2hhdGV2ZXIgVGhyZWF0ZW5zIFlvdSIsInZvdGVfYXZlcmFnZSI6MCwib3ZlcnZpZXciOiJGb2xsb3dpbmcgZnJvbSBCb2JjYXQgR29sZHRod2FpdCdzIHJldmVsYXRvcnkgZG9jdW1lbnRhcnksIENhbGwgTWUgTHVja3ksIEJhcnJ5IENyaW1taW5zJyBmcmllbmQgTG91aXMgQ0sgcHJvZHVjZWQgYW5kIGRpcmVjdGVkIFdoYXRldmVyIFRocmVhdGVucyBZb3UsIGhpcyBmaXJzdCBjb21lZHkgc3BlY2lhbCwgYXQgdGhlIExhd3JlbmNlIEFydHMgQ2VudGVyIGluIExhd3JlbmNlLCBLYW5zYXMgaW4gSnVuZSA0dGgsIDIwMTYuIEl0IHdhcyB0aGVuIHN1YnNlcXVlbnRseSBtYWRlIGF2YWlsYWJsZSBmb3IgZG93bmxvYWQgb24gTG91aXMgQ0sncyB3ZWJzaXRlIG9uIE9jdG9iZXIgMjNyZCwgMjAxNi4gIFRoZSBob3VyLWxvbmcgc3BlY2lhbCBpcyBhIHNoYXJwIHNldCBvZiB0aGUgYml0aW5nIHNvY2lhbCBhbmQgcG9saXRpY2FsIGNvbW1lbnRhcnkgdGhhdCBoYXMgZGVmaW5lZCBDcmltbWlucycgY2FyZWVyLCB0b3VjaGluZyB1cG9uIGhpcyBiZWdpbm5pbmdzIGluIGhlbHBpbmcgdG8gZm91bmQgdGhlIEJvc3RvbiBjb21lZHkgc2NlbmUsIHJpZ2h0IHVwIHRvIGhpcyB0aG91Z2h0cyBvbiB0aGUgdXBjb21pbmcgMjAxNiBVUyBlbGVjdGlvbi4iLCJyZWxlYXNlX2RhdGUiOiIyMDE2LTEwLTIzIn0seyJwb3B1bGFyaXR5IjoxLjE4NSwiaWQiOjE1NDgwMSwidmlkZW8iOmZhbHNlLCJ2b3RlX2NvdW50IjowLCJ2b3RlX2F2ZXJhZ2UiOjAsInRpdGxlIjoiV2hhdGV2ZXIgSXQgVGFrZXMiLCJyZWxlYXNlX2RhdGUiOiIyMDA5LTAzLTE0Iiwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiV2hhdGV2ZXIgSXQgVGFrZXMiLCJnZW5yZV9pZHMiOls5OV0sImJhY2tkcm9wX3BhdGgiOm51bGwsImFkdWx0IjpmYWxzZSwib3ZlcnZpZXciOiJXSEFURVZFUiBJVCBUQUtFUyBjaHJvbmljbGVzIHRoZSBzdHJ1Z2dsZXMgYW5kIHRyaXVtcGhzIG9mIHRoZSB2ZXJ5IGZpcnN0IHllYXIgb2YgdGhlIEJyb254IENlbnRlciBmb3IgU2NpZW5jZSAmYW1wOyBNYXRoZW1hdGljcywgYW4gaW5ub3ZhdGl2ZSBwdWJsaWMgaGlnaCBzY2hvb2wgc2V0IGluIE5ZQ+KAmXMgU291dGggQnJvbnguIFRoaXMgZGVlcGx5IGVtb3Rpb25hbCwgY2hhcmFjdGVyLWRyaXZlbiBkb2N1bWVudGFyeSBmb2N1c2VzIG9uIEVkd2FyZCBUb20sIHRoZSBzY2hvb2zigJlzIGR5bmFtaWMgcm9va2llIHByaW5jaXBhbCwgYW5kIFNoYXJpZmVhIEJhc2tlcnZpbGxlLCBhIHRhbGVudGVkIGJ1dCB0cm91YmxlZCBuaW50aC1ncmFkZSBnaXJsLiAgR3JpdHRpbHksIHJlYWxpc3RpYywgeWV0IHVsdGltYXRlbHkgdHJpdW1waGFudCwgV0hBVEVWRVIgSVQgVEFLRVMgcGFpbnRzIGEgY29tcGVsbGluZyBwaWN0dXJlIG9mIGN1dHRpbmctZWRnZSBpZGVhcyBhbmQgZGVkaWNhdGVkIGluZGl2aWR1YWxzLCB1bml0ZWQgaW4gdGhlaXIgdmlzaW9uIHRvIHJlc3RvcmUgaG9wZSB0byBhIGJyb2tlbiBjb21tdW5pdHkuIiwicG9zdGVyX3BhdGgiOm51bGx9LHsicG9wdWxhcml0eSI6MS4zNDEsInZvdGVfY291bnQiOjAsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOm51bGwsImlkIjo3MDUxNDYsImFkdWx0IjpmYWxzZSwiYmFja2Ryb3BfcGF0aCI6bnVsbCwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiV2hhdGV2ZXIgSGFwcGVuZWQgdG8gTWljaGVhbCBSYXk/IiwiZ2VucmVfaWRzIjpbOTldLCJ0aXRsZSI6IldoYXRldmVyIEhhcHBlbmVkIHRvIE1pY2hlYWwgUmF5PyIsInZvdGVfYXZlcmFnZSI6MCwib3ZlcnZpZXciOiJXaGF0ZXZlciBIYXBwZW5lZCB0byBNaWNoZWFsIFJheT8gaXMgYW4gQW1lcmljYW4gZG9jdW1lbnRhcnkgcHJvZHVjZWQgaW4gMjAwMCBieSBOQkEgRW50ZXJ0YWlubWVudCBhYm91dCB0aGUgcmlzZSBhbmQgZmFsbCBvZiBBbGwtU3RhciBwb2ludCBndWFyZCBNaWNoZWFsIFJheSBSaWNoYXJkc29uLiIsInJlbGVhc2VfZGF0ZSI6IjIwMDAtMDItMTYifV19
  recorded_at: Tue, 13 Oct 2020 19:26:32 GMT
- request:
    method: get
    uri: https://api.themoviedb.org/3/search/movie?api_key=<MOVIEDB_API_KEY>&language=en-US&page=2&query=whatever
    body:
      encoding: US-ASCII
      string: ''
    headers:
      X-Api-Key:
      - "<MOVIEDB_API_KEY>"
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Date:
      - Tue, 13 Oct 2020 19:26:32 GMT
      Server:
      - openresty
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, HEAD, POST, PUT, DELETE, OPTIONS
      Access-Control-Expose-Headers:
      - ETag, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After,
        Content-Length, Content-Range
      Cache-Control:
      - public, max-age=120
      Vary:
      - Accept-Encoding
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 6d9f09528e589f3fa7ca05f965ea37a2.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - DEN50-C2
      X-Amz-Cf-Id:
      - dC4_m9CZatVl-hbdW09NHvClVr7WougnFqJnVPDmV-E_9LxIcRo9fQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 13 Oct 2020 19:26:32 GMT
recorded_with: VCR 6.0.0
